<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/webicons/2.0.0/webicons.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">


	<main class="col-xs-12 col-sm-8 col-lg-9 col-xl-10 pt-3 pl-4 ml-auto">
		<header class="page-header row justify-center">
			<div class="col-md-6 col-lg-8">
				<h1 class="float-left text-center text-md-left">Action Board</h1>
			</div>
			<div class="dropdown user-dropdown col-md-6 col-lg-4 text-center text-md-right"><a class="btn btn-stripped dropdown-toggle" href="https://example.com" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				<img src="https://i.imgur.com/sRiXEAA.jpg" alt="profile photo" class="circle float-left profile-photo" width="50" height="auto">
				<div class="username mt-1">
					<h4 class="mb-1">Shaun Bradley</h4>
					<h6 class="text-muted">People Director</h6>
				</div>
				</a>
				<div class="dropdown-menu dropdown-menu-right" style="margin-right: 1.5rem;" aria-labelledby="dropdownMenuLink"><%= link_to "My Profile", pages_profile_path, :class => "dropdown-item" %>
				     <a class="dropdown-item" href="#">Logout</a></div>
			</div>
			<div class="clear"></div>
		</header>

		<section class="row space">
			<div class="col-md-6">
			</div>
			<div class="col-md-6">
				<div class="float-right">
					<button type="button" class="btn btn-md btn-tertiary">Preview action board</button>
					<button type="button" class="btn btn-md btn-secondary">Publish action board</button>
				</div>
			</div>
		</section>


	 <section class="row">
					<div class="col-sm-12">
						<section class="row">
							<div class="col-md-12 col-lg-12">
								<div class="page-content">
					      <ul class="taskboard-stages ui-sortable" id="taskboardStages"><li class="taskboard-stage">
					              <header class="taskboard-stage-header ui-sortable-handle">
					                <div class="taskboard-stage-actions float-right">
					                  <div class="dropdown">
					                    <a data-toggle="dropdown" href="#" aria-expanded="false"><i class="icon wb-chevron-down" aria-hidden="true"></i></a>
					                    <div class="dropdown-menu bullet" role="menu">
					                      <a class="taskboard-stage-rename dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-pencil" aria-hidden="true"></i>Rename</a>
					                      <a class="taskboard-stage-delete dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-trash" aria-hidden="true"></i>Delete</a>
					                        <div class="taskboard-stage-rename-wrap">
					                          <div class="form-group">
					                            <input class="form-control taskboard-stage-rename-input" type="text" value="TO DO" name="name">
					                          </div>
					                          <button class="btn btn-primary btn-block taskboard-stage-rename-save" type="button">Save</button>
					                        </div>
					                    </div>
					                  </div>
					                </div>
					                <h5 class="taskboard-stage-title">Suggested Action Items</h5>
					              </header>
					              <div class="taskboard-stage-content">
					                <ul class="list-group taskboard-list ui-sortable"><li class="list-group-item priority-urgent" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					                <label class="task-title">Introducing a Friday beer trolley</label>
					              </div>
					              <div class="w-full">
					                <div class="task-badges"><span class="task-badge small task-badge-subtask icon wb-list-bulleted">You selected this to improve culture</span></div>
					              </div>
					            </li><li class="list-group-item priority-high" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					                <label class="task-title">Cross department show and tell</label>
					              </div>
					              <div class="w-full">
					                <div class="task-badges"><span class="task-badge small task-badge-subtask icon wb-list-bulleted">You selected this to improve communication</span></div>
					              </div>
					            </li></ul>
					                <div class="action-wrap">
					                  <a class="add-item-toggle" href="#"><i class="icon wb-plus" aria-hidden="true"></i>Add Action Item</a>
					                    <div class="add-item-wrap">
					                      <form class="add-item" role="form" method="post" action="#">
					                        <div class="form-group">
					                          <label class="form-control-label mb-15" for="name">Task name:</label>
					                          <input class="form-control" type="text" placeholder="Task name" name="name">
					                        </div>
					                        <div class="form-group text-right">
					                          <a class="btn btn-sm btn-white add-item-cancel">Cancel</a>
					                          <button type="button" class="btn btn-primary add-item-add">Add</button>
					                        </div>
					                      </form>
					                    </div>
					                </div>
					              </div>
					            </li><li class="taskboard-stage">
					              <header class="taskboard-stage-header ui-sortable-handle">
					                <div class="taskboard-stage-actions float-right">
					                  <div class="dropdown">
					                    <a data-toggle="dropdown" href="#" aria-expanded="false"><i class="icon wb-chevron-down" aria-hidden="true"></i></a>
					                    <div class="dropdown-menu bullet" role="menu">
					                      <a class="taskboard-stage-rename dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-pencil" aria-hidden="true"></i>Rename</a>
					                      <a class="taskboard-stage-delete dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-trash" aria-hidden="true"></i>Delete</a>
					                        <div class="taskboard-stage-rename-wrap">
					                          <div class="form-group">
					                            <input class="form-control taskboard-stage-rename-input" type="text" value="DOING" name="name">
					                          </div>
					                          <button class="btn btn-primary btn-block taskboard-stage-rename-save" type="button">Save</button>
					                        </div>
					                    </div>
					                  </div>
					                </div>
					                <h5 class="taskboard-stage-title">Trending Feedback</h5>
					              </header>
					              <div class="taskboard-stage-content">
					                
					                <div class="action-wrap">
					                  <a class="add-item-toggle" href="#"><i class="icon wb-plus" aria-hidden="true"></i>Add Common Feedback</a>
					                    <div class="add-item-wrap">
					                      <form class="add-item" role="form" method="post" action="#">
					                        <div class="form-group">
					                          <label class="form-control-label mb-15" for="name">Task name:</label>
					                          <input class="form-control" type="text" placeholder="Task name" name="name">
					                        </div>
					                        <div class="form-group text-right">
					                          <a class="btn btn-sm btn-white add-item-cancel">Cancel</a>
					                          <button type="button" class="btn btn-primary add-item-add">Add</button>
					                        </div>
					                      </form>
					                    </div>
					                </div>
					              </div>
					            </li><li class="taskboard-stage">
					              <header class="taskboard-stage-header ui-sortable-handle">
					                <div class="taskboard-stage-actions float-right">
					                  <div class="dropdown">
					                    <a data-toggle="dropdown" href="#" aria-expanded="false"><i class="icon wb-chevron-down" aria-hidden="true"></i></a>
					                    <div class="dropdown-menu bullet" role="menu">
					                      <a class="taskboard-stage-rename dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-pencil" aria-hidden="true"></i>Rename</a>
					                      <a class="taskboard-stage-delete dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-trash" aria-hidden="true"></i>Delete</a>
					                        <div class="taskboard-stage-rename-wrap">
					                          <div class="form-group">
					                            <input class="form-control taskboard-stage-rename-input" type="text" value="DOING" name="name">
					                          </div>
					                          <button class="btn btn-primary btn-block taskboard-stage-rename-save" type="button">Save</button>
					                        </div>
					                    </div>
					                  </div>
					                </div>
					                <h5 class="taskboard-stage-title">Things we're doing</h5>
					              </header>
					              <div class="taskboard-stage-content">
					                <ul class="list-group taskboard-list ui-sortable"><li class="list-group-item priority-normal" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					            
					                <label class="task-title">Monthly Ask Us Anything</label>
					              </div>
					              <div class="w-full">
					                <div class="task-badges"><span class="task-badge small task-badge-subtask icon wb-calendar">A chance to ask senior...</span></div>
					                <ul class="task-members">
					              </div>
					            </li><li class="list-group-item priority-high" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					                <input type="checkbox" name="checkbox">
					                
					              </div>
					              <div class="w-full">
					                <div class="task-badges"></div>
					                <ul class="task-members">
					                  
					                </ul>
					              </div>
					            </li></ul>
					                <div class="action-wrap">
					                  <a class="add-item-toggle" href="#"><i class="icon wb-plus" aria-hidden="true"></i>Add Action Item</a>
					                    <div class="add-item-wrap">
					                      <form class="add-item" role="form" method="post" action="#">
					                        <div class="form-group">
					                          <label class="form-control-label mb-15" for="name">Task name:</label>
					                          <input class="form-control" type="text" placeholder="Task name" name="name">
					                        </div>
					                        <div class="form-group text-right">
					                          <a class="btn btn-sm btn-white add-item-cancel">Cancel</a>
					                          <button type="button" class="btn btn-primary add-item-add">Add</button>
					                        </div>
					                      </form>
					                    </div>
					                </div>
					              </div>
					            </li><li class="taskboard-stage">
					              <header class="taskboard-stage-header ui-sortable-handle">
					                <div class="taskboard-stage-actions float-right">
					                  <div class="dropdown">
					                    <a data-toggle="dropdown" href="#" aria-expanded="false"><i class="icon wb-chevron-down" aria-hidden="true"></i></a>
					                    <div class="dropdown-menu bullet" role="menu">
					                      <a class="taskboard-stage-rename dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-pencil" aria-hidden="true"></i>Rename</a>
					                      <a class="taskboard-stage-delete dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-trash" aria-hidden="true"></i>Delete</a>
					                        <div class="taskboard-stage-rename-wrap">
					                          <div class="form-group">
					                            <input class="form-control taskboard-stage-rename-input" type="text" value="DONE" name="name">
					                          </div>
					                          <button class="btn btn-primary btn-block taskboard-stage-rename-save" type="button">Save</button>
					                        </div>
					                    </div>
					                  </div>
					                </div>
					                <h5 class="taskboard-stage-title">Perkbox Wins (Done)</h5>
					              </header>
					              <div class="taskboard-stage-content">
					                <ul class="list-group taskboard-list ui-sortable"><li class="list-group-item priority-normal" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					                
					              </div>
					              <div class="w-full">
					                <div class="task-badges"></div>
					                <ul class="task-members">
					                  
					                </ul>
					              </div>
					            </li><li class="list-group-item priority-normal" data-taskboard="slidePanel" data-url="panel.tpl">
					              <div class="checkbox-custom checkbox-primary">
					                
					              </div>
					              <div class="w-full">
					                
					                <ul class="task-members">
					                  
					                </ul>
					              </div>
					            </li></ul>
					                <div class="action-wrap">
					                  <a class="add-item-toggle" href="#"><i class="icon wb-plus" aria-hidden="true"></i>Add Action Item</a>
					                    <div class="add-item-wrap">
					                      <form class="add-item" role="form" method="post" action="#">
					                        <div class="form-group">
					                          <label class="form-control-label mb-15" for="name">Task name:</label>
					                          <input class="form-control" type="text" placeholder="Task name" name="name">
					                        </div>
					                        <div class="form-group text-right">
					                          <a class="btn btn-sm btn-white add-item-cancel">Cancel</a>
					                          <button type="button" class="btn btn-primary add-item-add">Add</button>
					                        </div>
					                      </form>
					                    </div>
					                </div>
					              </div>
					            </li></ul>
    </div>
							</div>
						</section>
					</div>
				</section>
	</main>
</div>


<script type="text/javascript">
$(document).on("click","ul.nav li.parent > a ", function(){          
    $(this).find('i').toggleClass("fa-minus");      
}); 
$(".sidebar span.icon").find('em:first').addClass("fa-plus");

$('#calendar').datepicker({
		});

$("#menu-toggle").click(function(e) {
        e.preventDefault();
        $("#wrapper").toggleClass("toggled");
    });
</script>



<script type="text/javascript">
	$(function () {
  $('[data-toggle="tooltip"]').tooltip()
})
</script>

<script type="text/javascript">
	(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/apps/taskboard', ['jquery'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.jQuery);
    global.appsTaskboard = mod.exports;
  }
})(this, function (_jquery) {
  'use strict';

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  (0, _jquery2.default)(document).ready(function () {
    AppTaskboard.run();
  });
});
</script>


<script type="text/javascript">
	(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/App/Taskboard', ['exports', 'Site'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('Site'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Site);
    global.AppTaskboard = mod.exports;
  }
})(this, function (exports, _Site2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getInstance = exports.run = exports.AppTaskboard = undefined;

  var _Site3 = babelHelpers.interopRequireDefault(_Site2);

  var dataTpl = function dataTpl() {
    var data = {
      status: false,
      title: '',
      description: '',
      priority: 'normal',
      duedate: '',
      members: [],
      subtasks: [],
      attachments: [],
      comments: []
    };
    return data;
  };

  var StageList = function () {
    function StageList($el, data) {
      babelHelpers.classCallCheck(this, StageList);

      this.$el = $el;
      this.data = data;

      this.render();
      this.$el.sortable({
        handle: '.taskboard-stage-header'
      });
    }

    babelHelpers.createClass(StageList, [{
      key: 'add',
      value: function add() {
        var stage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (stage instanceof Stage) {
          this.$el.append(stage.$el);
        } else {
          this.add(this.createStage(stage));
        }
      }
    }, {
      key: 'createStage',
      value: function createStage(data) {
        return new Stage(data);
      }
    }, {
      key: 'render',
      value: function render() {
        var length = this.data.length;
        for (var i = 0; i < length; i++) {
          var stage = this.createStage(this.data[i]);
          this.add(stage);
        }
      }
    }]);
    return StageList;
  }();

  var Stage = function () {
    function Stage(data) {
      babelHelpers.classCallCheck(this, Stage);

      this.data = data;
      this.$el = null;
      this.$taskList = null;
      this.taskList = null;
      this.render();

      this.$stageDropdownArrow = $('.taskboard-stage-actions a[data-toggle="dropdown"]', this.$el);
      this.bindStageDropdownArrow();
      this.$renameBtn = $('.taskboard-stage-rename', this.$el);
      this.bindRenameBtn();
      this.$renameSaveBtn = $('.taskboard-stage-rename-save', this.$el);
      this.bindRenameSaveBtn();
      this.$deleteBtn = $('.taskboard-stage-delete', this.$el);
      this.bindDeleteBtn();
    }

    babelHelpers.createClass(Stage, [{
      key: 'render',
      value: function render() {
        this.$el = $(this.getTpl(this.data.title));
        this.$taskList = this.$el.find('.taskboard-list');
        var tasksData = this.data.tasks;
        this.taskList = new TaskList(this.$taskList, tasksData);
      }
    }, {
      key: 'getTpl',
      value: function getTpl(title) {
        return '\n            <li class="taskboard-stage">\n              <header class="taskboard-stage-header">\n                <div class="taskboard-stage-actions float-right">\n                  <div class="dropdown">\n                    <a data-toggle="dropdown" href="#" aria-expanded="false"><i class="icon wb-chevron-down" aria-hidden="true"></i></a>\n                    <div class="dropdown-menu bullet" role="menu">\n                      <a class="taskboard-stage-rename dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-pencil" aria-hidden="true"></i>Rename</a>\n                      <a class="taskboard-stage-delete dropdown-item" href="javascript:void(0)" role="menuitem"><i class="icon wb-trash" aria-hidden="true"></i>Delete</a>\n                        <div class="taskboard-stage-rename-wrap">\n                          <div class="form-group">\n                            <input class="form-control taskboard-stage-rename-input" type="text" value="' + title + '" name="name">\n                          </div>\n                          <button class="btn btn-primary btn-block taskboard-stage-rename-save" type="button">Save</button>\n                        </div>\n                    </div>\n                  </div>\n                </div>\n                <h5 class="taskboard-stage-title">' + title + '</h5>\n              </header>\n              <div class="taskboard-stage-content">\n                <ul class="list-group taskboard-list"></ul>\n                <div class="action-wrap">\n                  <a class="add-item-toggle" href="#"><i class="icon wb-plus" aria-hidden="true"></i>Add Task</a>\n                    <div class="add-item-wrap">\n                      <form class="add-item" role="form" method="post" action="#">\n                        <div class="form-group">\n                          <label class="form-control-label mb-15" for="name">Task name:</label>\n                          <input class="form-control" type="text" placeholder="Task name" name="name">\n                        </div>\n                        <div class="form-group text-right">\n                          <a class="btn btn-sm btn-white add-item-cancel">Cancel</a>\n                          <button type="button" class="btn btn-primary add-item-add">Add</button>\n                        </div>\n                      </form>\n                    </div>\n                </div>\n              </div>\n            </li>\n           ';
      }
    }, {
      key: 'bindStageDropdownArrow',
      value: function bindStageDropdownArrow() {
        this.$stageDropdownArrow.on('click', function () {
          $(this).next('.dropdown-menu').removeClass('is-edit');
        });
      }
    }, {
      key: 'bindRenameBtn',
      value: function bindRenameBtn() {
        this.$renameBtn.on('click', function (e) {
          var $header = $(this).closest('.taskboard-stage-header'),
              $menu = $(this).closest('.dropdown-menu');

          var $input = $('.taskboard-stage-rename-input', $menu),
              $title = $('.taskboard-stage-title', $header);

          $menu.toggleClass('is-edit');
          $input.val('').focus().val($title.html());
          e.stopPropagation();
        });
      }
    }, {
      key: 'bindRenameSaveBtn',
      value: function bindRenameSaveBtn() {
        this.$renameSaveBtn.on('click', function () {
          var $header = $(this).closest('.taskboard-stage-header'),
              $input = $('.taskboard-stage-rename-input', $header),
              $title = $('.taskboard-stage-title', $header),
              value = $input.val();

          if (value.length === 0) {
            return;
          }
          $title.html(value);
        });
      }
    }, {
      key: 'bindDeleteBtn',
      value: function bindDeleteBtn() {
        this.$deleteBtn.on('click', function () {
          var $this = $(this);
          bootbox.dialog({
            message: 'Do you want to delete the stage?',
            buttons: {
              success: {
                label: 'Delete',
                className: 'btn-danger',
                callback: function callback() {
                  $this.closest('.taskboard-stage').remove();
                }
              }
            }
          });
        });
      }
    }]);
    return Stage;
  }();

  var TaskList = function () {
    function TaskList($el, data) {
      babelHelpers.classCallCheck(this, TaskList);

      this.$el = $el;
      this.data = data;
      this.render();
      this.$el.sortable({
        connectWith: '.taskboard-stage .list-group'
      });

      this.$wrap = this.$el.parent().find('.action-wrap');
      this.$addItemToggle = this.$wrap.find('.add-item-toggle');
      this.bindAddItemToggle();
      this.$addItemBtn = this.$wrap.find('.add-item-add');
      this.bindAddItemBtn();
      this.$cancelBtn = this.$wrap.find('.add-item-cancel');
      this.bindCancelBtn();
      this.bindTaskInput();
      this.handleOpenSlidePanel();
    }

    babelHelpers.createClass(TaskList, [{
      key: 'add',
      value: function add() {
        var task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (task instanceof Task) {
          this.$el.append(task.$el);
        } else {
          var taskObj = this.createTask(task);
          taskObj.$el.data('taskInfo', task);
          this.add(taskObj);
        }
      }
    }, {
      key: 'createTask',
      value: function createTask(data) {
        return new Task(data);
      }
    }, {
      key: 'render',
      value: function render() {
        var length = this.data.length;
        if (length === 0) {
          return;
        }
        for (var i = 0; i < length; i++) {
          var task = this.createTask(this.data[i]);
          task.$el.data('taskInfo', this.data[i]);
          this.add(task);
        }
      }
    }, {
      key: 'bindAddItemToggle',
      value: function bindAddItemToggle() {
        var _this2 = this;

        this.$addItemToggle.on('click', function () {
          var $input = $('[name="name"]', _this2.$wrap);
          _this2.$wrap.toggleClass('action-open');
          $input.val('');
        });

        this.$wrap.on('click.add-item', '.form-control-label', function (e) {
          _this2.$wrap.removeClass('action-open');
          _this2.$el.off('click.add-item');
        });
      }
    }, {
      key: 'bindAddItemBtn',
      value: function bindAddItemBtn() {
        var _this3 = this;

        this.$addItemBtn.on('click', function () {
          var $input = $('[name="name"]', _this3.$wrap);
          var taskData = dataTpl();

          if ($input.val().length !== 0) {
            taskData.title = $input.val();
            _this3.add(taskData);
          }

          _this3.$wrap.toggleClass('action-open');
        });
      }
    }, {
      key: 'bindCancelBtn',
      value: function bindCancelBtn() {
        var self = this;
        this.$cancelBtn.on('click', function () {
          self.$wrap.toggleClass('action-open');
        });
      }
    }, {
      key: 'bindTaskInput',
      value: function bindTaskInput() {
        this.$el.on('click', '.checkbox-custom input', function (e) {
          var $this = $(this);

          var $target = $this.closest('.list-group-item'),
              taskData = $target.data('taskInfo');

          taskData.complete = $this.prop('checked');
          $target.data('taskInfo', taskData);
          e.stopPropagation();
        });
      }
    }, {
      key: 'openSlidePanel',
      value: function openSlidePanel(jsonObj, showOptions) {
        if (typeof $.slidePanel === 'undefined') {
          return;
        }
        slidePanel.show(jsonObj, showOptions);
      }
    }, {
      key: 'handleOpenSlidePanel',
      value: function handleOpenSlidePanel() {
        var self = this;
        var options = $.extend({}, slidePanel.defaults, slidePanel.defaultsOptions);
        this.$el.on('click', '[data-taskboard="slidePanel"]', function (e) {
          var $target = $(e.target).closest('.list-group-item');
          var jsonData = {
            url: $(this).data('url'),
            target: $target
          };

          self.openSlidePanel(jsonData, options);
          e.stopPropagation();
        });
      }
    }]);
    return TaskList;
  }();

  var sildePaneldefaults = Plugin.getDefaults('slidePanel');
  var sildePaneldefaultsOptions = {
    template: function template(options) {
      return '\n          <div class="' + options.classes.base + '  ' + options.classes.base + '-' + options.direction + '">\n            <div class="' + options.classes.base + '-scrollable"><div>\n            <div class="' + options.classes.content + '"></div>\n            </div></div>\n            <div class="' + options.classes.base + '-handler"></div>\n          </div>\n          ';
    },
    afterLoad: function afterLoad(object) {
      var _this = this;
      var $target = $(object.target);
      var info = $target.data('taskInfo');

      this.$panel.find('.' + this.options.classes.base + '-scrollable').asScrollable({
        namespace: 'scrollable',
        contentSelector: '>',
        containerSelector: '>'
      });

      this.$panel.find('#task-description').markdown();
      if (typeof info !== 'undefined' && info.duedate.length > 0) {
        this.$panel.find('#taskDatepicker').data('date', info.duedate);
      }
      this.$panel.find('#taskDatepicker').datepicker({
        autoclose: false,
        todayHighlight: true
      }).on('changeDate', function () {
        $('#taskDatepickerInput').val(_this.$panel.find('#taskDatepicker').datepicker('getFormattedDate'));
      });

      this.$panel.data('slidePanel', object);

      $(document).off('click.slidePanelDatepicker');
      $(document).on('click.slidePanelDatepicker', 'span, td, th', function (e) {
        e.stopPropagation();
      });
    },
    afterShow: function afterShow() {
      var self = this;
      $(document).on('click.slidePanelShow', function (e) {
        if ($(e.target).closest('.slidePanel').length === 0 && $(e.target).closest('body').length === 1) {
          self.hide();
        }
      });
    },
    afterHide: function afterHide() {
      $(document).off('click.slidePanelShow');
      $(document).off('click.slidePanelDatepicker');
    },
    contentFilter: function contentFilter(data, object) {
      var $checked = undefined,
          $panel = $(data),
          $target = $(object.target);
      var info = $target.data('taskInfo');
      var $stage = $target.closest('.taskboard-stage');
      $('.stage-name', $panel).html($('.taskboard-stage-title', $stage.html()));

      $('.task-title', $panel).html(info.title);

      switch (info.priority) {
        case 'high':
          $checked = $('#priorityHigh', $panel);
          break;
        case 'urgent':
          $checked = $('#priorityUrgent', $panel);
          break;
        default:
          $checked = $('#priorityNormal', $panel);
          break;
        // no default
      }

      $checked.prop('checked', true);
      slidePanel.handleSelective($('[data-plugin="jquery-selective"]', $panel), info.members);

      if (info.description.length === 0) {
        $('.description', $panel).addClass('is-empty');
      } else {
        $('.description-content', $panel).html(info.description);
      }

      if (info.subtasks.length !== 0) {
        var length = info.subtasks.length;
        for (var i = 0; i < length; i++) {
          var $subtask = $(slidePanel.subtaskTpl(info.subtasks[i]));
          $('.subtasks-list', $panel).append($subtask);
        }

        $('.subtasks', $panel).toggleClass('is-show');
      }

      if (info.attachments.length !== 0) {
        var _length = info.attachments.length;
        for (var _i = 0; _i < _length; _i++) {
          var $attachment = $(slidePanel.attachmentTpl(info.attachments[_i]));
          $('.attachments-list', $panel).append($attachment);
        }
        $('.attachments', $panel).toggleClass('is-show');
      }

      if (info.comments.length !== 0) {
        var _length2 = info.comments.length;
        for (var _i2 = 0; _i2 < _length2; _i2++) {
          var $comment = $(slidePanel.commentTpl(info.comments[_i2].src, info.comments[_i2].user, info.comments[_i2].time, info.comments[_i2].content));
          $('.comments-history', $panel).append($comment);
        }
      }

      return $panel;
    }
  };

  var slidePanel = {
    defaults: sildePaneldefaults,
    defaultsOptions: sildePaneldefaultsOptions,

    handleSelective: function handleSelective($target, selected) {
      var getSelected = function getSelected() {
        var _this = this;
        var arr = [];
        $.each(this._options.getOptions(this), function (n, option) {
          $.each(_this.options.local, function (i, user) {
            if (user.id === $(option).val()) {
              arr.push(user);
            }
          });
        });
        return arr;
      };
      var members = [{
        id: 'uid_1',
        name: 'Herman Beck',
        img: '../../../../global/portraits/1.jpg'
      }, {
        id: 'uid_2',
        name: 'Mary Adams',
        img: '../../../../global/portraits/2.jpg'
      }, {
        id: 'uid_3',
        name: 'Caleb Richards',
        img: '../../../../global/portraits/3.jpg'
      }, {
        id: 'uid_4',
        name: 'June Lane',
        img: '../../../../global/portraits/4.jpg'
      }, {
        id: 'uid_5',
        name: 'Edward Fletcher',
        img: '../../../../global/portraits/5.jpg'
      }, {
        id: 'uid_6',
        name: 'Crystal Bates',
        img: '../../../../global/portraits/6.jpg'
      }];

      $target.selective({
        namespace: 'addMember',
        local: members,
        selected: selected,
        buildFromHtml: false,
        tpl: {
          optionValue: function optionValue(data) {
            return data.id;
          },
          frame: function frame() {
            return '<div class="' + this.namespace + '">\n            ' + this.options.tpl.items.call(this) + '\n            <div class="' + this.namespace + '-trigger">\n            ' + this.options.tpl.triggerButton.call(this) + '\n            <div class="' + this.namespace + '-trigger-dropdown">\n            ' + this.options.tpl.list.call(this) + '\n            </div>\n            </div>\n            </div>';
          },
          triggerButton: function triggerButton() {
            return '<div class="' + this.namespace + '-trigger-button"><i class="wb-plus"></i></div>';
          },
          listItem: function listItem(data) {
            return '<li class="' + this.namespace + '-list-item"><img class="avatar" src="' + data.img + '">' + data.name + '</li>';
          },
          item: function item(data) {
            return '<li class="' + this.namespace + '-item"><img class="avatar" src="' + data.img + '">\n            ' + this.options.tpl.itemRemove.call(this) + '\n            </li>';
          },
          itemRemove: function itemRemove() {
            return '<span class="' + this.namespace + '-remove"><i class="wb-minus-circle"></i></span>';
          },
          option: function option(data) {
            return '<option value="' + this.options.tpl.optionValue.call(this, data) + '">' + data.name + '</option>';
          }
        },

        onAfterItemAdd: function onAfterItemAdd() {
          var $target = this.$element.closest('.slidePanel').data('slidePanel').target;
          var arr = getSelected.call(this),
              taskData = $target.data('taskInfo');
          taskData.members = arr;

          $target.data('taskInfo', taskData);
          var $memberList = $target.find('.task-members');
          var memberList = new MemberList($memberList, arr);
        },
        onAfterItemRemove: function onAfterItemRemove() {
          var $target = this.$element.closest('.slidePanel').data('slidePanel').target;
          var arr = getSelected.call(this),
              taskData = $target.data('taskInfo');
          taskData.members = arr;

          $target.data('taskInfo', taskData);
          var $memberList = $target.find('.task-members');
          var memberList = new MemberList($memberList, arr);
        }
      });
    },
    subtaskTpl: function subtaskTpl(data) {
      var checkedString = data.complete ? 'checked="checked"' : '';
      return '\n            <li class="list-group-item subtask">\n              <div class="checkbox-custom checkbox-primary">\n                <input type="checkbox" ' + checkedString + ' name="checkbox">\n                <label class="title">' + data.title + '</label>\n              </div>\n              <div class="subtask-editor">\n                <form>\n                  <div class="form-group">\n                    <input class="form-control subtask-title" type="text" name="title">\n                  </div>\n                  <div class="form-group">\n                    <button class="btn btn-primary subtask-editor-save" type="button">Save</button>\n                    <a class="btn btn-sm btn-white subtask-editor-delete" href="javascript:void(0)">Delete</a>\n                  </div>\n                </form>\n              </div>\n            </li>\n           ';
    },
    attachmentTpl: function attachmentTpl(data) {
      return '\n            <li class="list-group-item">\n              <div class="meida">\n                <div class="pr-20">\n                  <div class="attachments-image">\n                    <img src="' + data.src + '">\n                  </div>\n                </div>\n                <div class="media-body">\n                  <p><span class="name">' + data.title + '</span><span</p>\n                  <p>\n                    <span class="size">' + data.size + '</span>\n                    <span class="attachments-actions">\n                      <button class="btn btn-icon btn-pure" type="button">\n                        <i class="icon wb-download" aria-hidden="true"></i>\n                      </button>\n                      <button class="btn btn-icon btn-pure" type="button">\n                         <i class="icon wb-trash" aria-hidden="true"></i>\n                      </button>\n                    </span>\n                  </p>\n                </div>\n              </div>\n            </li>\n           ';
    },
    commentTpl: function commentTpl(src, user, time, content) {
      return '\n            <div class="comment media">\n              <div class="pr-20">\n                <a class="avatar avatar-lg" href="javascript:void(0)">\n                  <img src="' + src + '" alt="...">\n                </a>\n              </div>\n              <div class="media-body">\n                <div class="comment-body">\n                  <a class="comment-author" href="javascript:void(0)">' + user + '</a>\n                  <div class="comment-meta">\n                    <span class="date">' + time + '</span>\n                  </div>\n                <div class="comment-content"><p>' + content + '</p></div>\n              </div>\n            </div>\n           ';
    },
    handlePriority: function handlePriority() {
      $(document).on('click', '[name="priorities"]', function () {
        var $this = $(this);
        var $target = $this.closest('.slidePanel').data('slidePanel').target;
        var taskData = $target.data('taskInfo');
        taskData.priority = $this.data('priority');
        $target.data('taskInfo', taskData);
        $target.removeClass('priority-normal priority-high priority-urgent').addClass('priority-' + $target.data('taskInfo').priority);
      });
    },
    handleDeleteTask: function handleDeleteTask() {
      $(document).on('click', '.taskboard-task-delete', function () {
        var $this = $(this);
        bootbox.dialog({
          message: 'Do you want to delete the task?',
          buttons: {
            success: {
              label: 'Delete',
              className: 'btn-danger',
              callback: function callback() {
                $this.closest('.slidePanel').data('slidePanel').target.remove();
                $('.slidePanel-close').trigger('click');
              }
            }
          }
        });
      });
    },
    handleEditor: function handleEditor() {
      $(document).on('click', '.slidePanel .task-title, .taskboard-task-edit, .description-toggle', function () {
        var $this = $(this);
        var $target = $this.closest('.slidePanel').data('slidePanel').target;
        var data = $target.data('taskInfo');

        $('#task-title').val(data.title);
        $('#task-description').val(data.description);
        $this.closest('.slidePanel').find('.task-main').addClass('is-edit');
      });

      $(document).on('click', '.task-main-editor-save', function () {
        var $this = $(this);
        var $target = $this.closest('.slidePanel').data('slidePanel').target;
        var taskData = $target.data('taskInfo');
        taskData.title = $('#task-title').val();
        taskData.description = $('#task-description').val();

        $target.data('taskInfo', taskData);
        $('.task-title', $target).html($target.data('taskInfo').title);
        $('.slidePanel .task-title').html($target.data('taskInfo').title);

        $('.slidePanel .description-content').html($target.data('taskInfo').description);

        $this.closest('.slidePanel').find('.task-main').removeClass('is-edit');
        if ($('#task-description').val().length === 0) {
          $('.description').addClass('is-empty');
        } else {
          $('.description').removeClass('is-empty');
        }
      });

      $(document).on('click', '.task-main-editor-cancel', function () {
        $(this).closest('.slidePanel').find('.task-main').removeClass('is-edit');
      });
    },
    handleSubtasks: function handleSubtasks() {
      var self = this;
      $(document).on('click', '.subtask-toggle', function () {
        var length = $('.subtask').length;
        var $input = $('.subtasks-add .subtask-title'),
            $subtasks = $('.subtasks');

        $input.val('');
        if (length === 0) {
          $subtasks.addClass('is-show');
        }
        $subtasks.addClass('is-edit');

        $input.focus();

        $(document).on('click.subtask-add', function (e) {
          var $target = $(e.target);
          if ($target.closest($('.subtasks-add')).length === 0) {
            $subtasks.removeClass('is-edit');
            $(document).off('click.subtask-add');
          }
        });
      });

      $(document).on('click', '.subtask-add-save', function () {
        var $input = $('.subtasks-add .subtask-title'),
            $subtasks = $('.subtasks'),
            $target = $(this).closest('.slidePanel').data('slidePanel').target;
        var length = $('.subtask').length,
            taskData = $target.data('taskInfo'),
            value = $input.val();

        if (value.length === 0) {
          if (length === 0) {
            $subtasks.removeClass('is-show');
          }
        } else {
          var data = {
            'title': value,
            'complete': false
          };
          var $subtask = $(self.subtaskTpl(data));

          $('.subtasks-list').append($subtask);
          taskData.subtasks[length] = data;
          $target.data('taskInfo', taskData);
          var $badgeList = $target.find('.task-badges');
          var badgeList = new BadgeList($badgeList, $target.data('taskInfo'));
        }
        $input.val('').focus();
      });

      $(document).on('click', '.subtask-add-cancel', function () {
        $('.subtasks').removeClass('is-edit');
        $(document).off('click.subtask-add');
      });

      $(document).on('click', '.subtask input', function () {
        var $this = $(this);
        var $subtask = $this.closest('.subtask'),
            $target = $this.closest('.slidePanel').data('slidePanel').target;
        var index = $subtask.index(),
            taskData = $target.data('taskInfo');
        taskData.subtasks[index].complete = $this.prop('checked');
        $target.data('taskInfo', taskData);
        var $badgeList = $target.find('.task-badges');
        var badgeList = new BadgeList($badgeList, $target.data('taskInfo'));
      });

      $(document).on('click', '.subtask .title', function () {
        var $this = $(this);
        var $subtask = $this.closest('.subtask'),
            $target = $this.closest('.slidePanel').data('slidePanel').target;
        var data = $target.data('taskInfo'),
            index = $subtask.index();
        var $input = $('.subtask-title', $subtask);

        $subtask.addClass('is-edit');
        $input.val('').focus().val(data.subtasks[index].title);

        $(document).on('click.subtask', function (e) {
          var $target = $(e.target);
          if ($target.closest($subtask).length === 0) {
            $subtask.removeClass('is-edit');
            $(document).off('click.subtask');
          }
        });
      });

      $(document).on('click', '.subtask-editor-save', function () {
        var $this = $(this);

        var $subtask = $this.closest('.subtask'),
            $target = $this.closest('.slidePanel').data('slidePanel').target;

        var data = $target.data('taskInfo'),
            index = $subtask.index(),
            taskData = $target.data('taskInfo');

        taskData.subtasks[index].title = $('.subtask-title', $subtask).val();
        $target.data('taskInfo', taskData);
        $('.title', $('.subtasks-list .subtask')[index]).html($('.subtask-title', $subtask).val());
        $subtask.removeClass('is-edit');
        $(document).off('click.subtask');
      });

      $(document).on('click', '.subtask-editor-delete', function (e) {
        var $this = $(this);
        bootbox.dialog({
          message: 'Do you want to delete the subtask?',
          buttons: {
            success: {
              label: 'Delete',
              className: 'btn-danger',
              callback: function callback() {
                var $subtask = $this.closest('.subtask'),
                    $target = $this.closest('.slidePanel').data('slidePanel').target;

                var data = $target.data('taskInfo'),
                    index = $subtask.index(),
                    taskData = $target.data('taskInfo');

                taskData.subtasks.splice(index, 1);
                $target.data('taskInfo', taskData);
                var $badgeList = $target.find('.task-badges');
                var badgeList = new BadgeList($badgeList, $target.data('taskInfo'));

                $subtask.remove();
                $(document).off('click.subtask');
                if ($('.subtask').length === 0) {
                  $('.subtasks').removeClass('is-show');
                }
              }
            }
          }
        });
      });
    },
    handleDatepicker: function handleDatepicker() {
      $(document).on('click', '.due-date-save', function () {
        var $this = $(this);
        var $target = $this.closest('.slidePanel').data('slidePanel').target;
        var taskData = $target.data('taskInfo'),
            value = $('#taskDatepickerInput').val();
        if (value.length > 0) {
          taskData.duedate = value;
          $target.data('taskInfo', taskData);
          var $badgeList = $target.find('.task-badges');
          var badgeList = new BadgeList($badgeList, $target.data('taskInfo'));
        }
      });

      $(document).on('click', '.due-date-delete', function () {
        var $this = $(this);
        var $target = $this.closest('.slidePanel').data('slidePanel').target;
        var taskData = $target.data('taskInfo');
        if (taskData.duedate.length === 0) {
          return;
        }
        taskData.duedate = '';
        $target.data('taskInfo', taskData);
        var $badgeList = $target.find('.task-badges');
        var badgeList = new BadgeList($badgeList, $target.data('taskInfo'));
        $('#taskDatepicker').datepicker('clearDates');
      });
    },
    handleAttachment: function handleAttachment() {
      $(document).on('click', '#fileuploadToggle', function () {
        $('#fileupload').trigger('click');
      });
    },
    show: function show(jsonObj, showOptions) {
      $.slidePanel.show(jsonObj, showOptions);
    }
  };

  var Task = function () {
    function Task(data) {
      babelHelpers.classCallCheck(this, Task);

      this.$el = null;
      this.data = data;
      this.$taskBages = null;
      this.$taskMembers = null;
      this.badgeList = null;
      this.memberList = null;
      this.render(this.once);
    }

    babelHelpers.createClass(Task, [{
      key: 'render',
      value: function render() {
        this.$el = $(this.getTpl(this.data));
        this.$taskBages = this.$el.find('.task-badges');
        this.badgeList = new BadgeList(this.$taskBages, this.data);
        if (this.data.members.length > 0) {
          this.$taskMembers = this.$el.find('.task-members');
          this.memberList = new MemberList(this.$taskMembers, this.data.members);
        }
      }
    }, {
      key: 'getTpl',
      value: function getTpl(data) {
        var checkedString = data.complete ? 'checked="checked"' : '';
        return '\n            <li class="list-group-item priority-' + data.priority + '" data-taskboard="slidePanel" data-url="panel.tpl">\n              <div class="checkbox-custom checkbox-primary">\n                <input type="checkbox" ' + checkedString + ' name="checkbox">\n                <label class="task-title">' + data.title + '</label>\n              </div>\n              <div class="w-full">\n                <div class="task-badges"></div>\n                <ul class="task-members">\n                  <li><img class="avatar avatar-sm" src="../../../../global/portraits/5.jpg"></li>\n                </ul>\n              </div>\n            </li>\n           ';
      }
    }]);
    return Task;
  }();

  var BadgeList = function () {
    function BadgeList($el, data) {
      babelHelpers.classCallCheck(this, BadgeList);

      this.$el = $el;
      this.data = data;
      this.render();
    }

    babelHelpers.createClass(BadgeList, [{
      key: 'add',
      value: function add(badge) {
        this.$el.append(badge.$el);
      }
    }, {
      key: 'render',
      value: function render() {
        var _duedateData$subtasks = {
          duedateData: this.data.duedate,
          subtasksData: this.data.subtasks,
          attachmentsData: this.data.attachments,
          commentsData: this.data.comments
        },
            duedateData = _duedateData$subtasks.duedateData,
            subtasksData = _duedateData$subtasks.subtasksData,
            attachmentsData = _duedateData$subtasks.attachmentsData,
            commentsData = _duedateData$subtasks.commentsData;


        this.$el.children().remove();

        if (duedateData.length > 0) {
          var duedate = new Duedate(duedateData);
          this.add(duedate);
        }

        if (subtasksData.length > 0) {
          var subtasks = new Subtask(subtasksData);
          this.add(subtasks);
        }

        if (attachmentsData.length > 0) {
          var attachments = new Attachment(attachmentsData);
          this.add(attachments);
        }

        if (commentsData.length > 0) {
          var comments = new Comment(commentsData);
          this.add(comments);
        }
      }
    }]);
    return BadgeList;
  }();

  var Duedate = function () {
    function Duedate(data) {
      babelHelpers.classCallCheck(this, Duedate);

      this.data = data;
      this.$el = null;
      this.render();
    }

    babelHelpers.createClass(Duedate, [{
      key: 'render',
      value: function render() {
        this.$el = $(this.getTpl(this.data.split(/\//, 2).join('/')));
      }
    }, {
      key: 'getTpl',
      value: function getTpl(content) {
        return '<span class="task-badge task-badge-subtask icon wb-calendar">' + content + '</span>';
      }
    }]);
    return Duedate;
  }();

  var Subtask = function () {
    function Subtask(data) {
      babelHelpers.classCallCheck(this, Subtask);

      this.data = data;
      this.$el = null;
      this.render();
    }

    babelHelpers.createClass(Subtask, [{
      key: 'render',
      value: function render() {
        var length = this.data.length;
        if (length > 0) {
          var num = 0;
          for (var i = 0; i < length; i++) {
            if (this.data[i].complete) {
              num++;
            }
          }
          this.$el = $(this.getTpl(num + '/' + length));
        }
      }
    }, {
      key: 'getTpl',
      value: function getTpl(content) {
        return '<span class="task-badge task-badge-subtask icon wb-list-bulleted">' + content + '</span>';
      }
    }]);
    return Subtask;
  }();

  var Attachment = function () {
    function Attachment(data) {
      babelHelpers.classCallCheck(this, Attachment);

      this.data = data;
      this.$el = null;
      this.render();
    }

    babelHelpers.createClass(Attachment, [{
      key: 'render',
      value: function render() {
        var length = this.data.length;
        if (length > 0) {
          this.$el = $(this.getTpl(this.data.length));
        }
      }
    }, {
      key: 'getTpl',
      value: function getTpl(content) {
        return '<span class="task-badge task-badge-attachments icon wb-paperclip">' + content + '</span>';
      }
    }]);
    return Attachment;
  }();

  var Comment = function () {
    function Comment(data) {
      babelHelpers.classCallCheck(this, Comment);

      this.data = data;
      this.$el = null;
      this.render();
    }

    babelHelpers.createClass(Comment, [{
      key: 'render',
      value: function render() {
        var length = this.data.length;
        if (length > 0) {
          this.$el = $(this.getTpl(this.data.length));
        }
      }
    }, {
      key: 'getTpl',
      value: function getTpl(content) {
        return '<span class="task-badge task-badge-comments icon wb-chat">' + content + '</span>';
      }
    }]);
    return Comment;
  }();

  var MemberList = function () {
    function MemberList($el, data) {
      babelHelpers.classCallCheck(this, MemberList);

      this.$el = $el;
      this.data = data;
      this.render();
    }

    babelHelpers.createClass(MemberList, [{
      key: 'createMember',
      value: function createMember(data) {
        return new Member(data);
      }
    }, {
      key: 'add',
      value: function add() {
        var member = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (member instanceof Member) {
          this.$el.append(member.$el);
        } else {
          var memberObj = this.createMember(member);
          this.add(memberObj);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        this.$el.children().remove();
        if (this.data.length === 0) {
          return;
        }
        var length = this.data.length;
        for (var i = 0; i < length; i++) {
          this.add(this.data[i]);
        }
      }
    }]);
    return MemberList;
  }();

  var Member = function () {
    function Member(data) {
      babelHelpers.classCallCheck(this, Member);

      this.data = data;
      this.$el = null;
      this.render();
    }

    babelHelpers.createClass(Member, [{
      key: 'render',
      value: function render() {
        this.$el = $(this.getTpl(this.data.img));
      }
    }, {
      key: 'getTpl',
      value: function getTpl(src) {
        return '<li><img class="avatar avatar-sm" src="' + src + '"></li>';
      }
    }]);
    return Member;
  }();

  var AppTaskboard = function (_Site) {
    babelHelpers.inherits(AppTaskboard, _Site);

    function AppTaskboard() {
      babelHelpers.classCallCheck(this, AppTaskboard);
      return babelHelpers.possibleConstructorReturn(this, (AppTaskboard.__proto__ || Object.getPrototypeOf(AppTaskboard)).apply(this, arguments));
    }

    babelHelpers.createClass(AppTaskboard, [{
      key: 'initialize',
      value: function initialize() {
        babelHelpers.get(AppTaskboard.prototype.__proto__ || Object.getPrototypeOf(AppTaskboard.prototype), 'initialize', this).call(this);

        this.$taskboard = $('#taskboardStages');
        this.stageList = null;
        this.createStageList();

        this.$floatBtn = $('.site-floataction');
        this.$model = $('#addStageFrom');
        this.$stageCreateBtn = this.$model.find('#taskboardStageCreat');
      }
    }, {
      key: 'process',
      value: function process() {
        babelHelpers.get(AppTaskboard.prototype.__proto__ || Object.getPrototypeOf(AppTaskboard.prototype), 'process', this).call(this);

        this.bindFloatBtn();
        this.bindStageCreateBtn();

        this.handleSlidePandelAction();
      }
    }, {
      key: 'createStageList',
      value: function createStageList() {
        var _this5 = this;

        var assets = Config.get('assets');

        $.getJSON(assets + '/data/taskboard.json', function (data) {
          _this5.stageList = new StageList(_this5.$taskboard, data);
        });
      }
    }, {
      key: 'bindFloatBtn',
      value: function bindFloatBtn() {
        var _this6 = this;

        this.$floatBtn.on('click', function () {
          $('input', _this6.$model).val('');
          $('option:first', $('select', _this6.$model)).prop('selected', 'selected');
        });
      }
    }, {
      key: 'bindStageCreateBtn',
      value: function bindStageCreateBtn() {
        var _this7 = this;

        this.$stageCreateBtn.on('click', function () {
          var $name = $('[name="name"]', _this7.$model);
          var stageData = {
            title: $name.val(),
            tasks: []
          };
          _this7.stageList.add(stageData);
        });
      }
    }, {
      key: 'handleSlidePandelAction',
      value: function handleSlidePandelAction() {
        slidePanel.handlePriority();
        slidePanel.handleSubtasks();
        slidePanel.handleDatepicker();
        slidePanel.handleEditor();
        slidePanel.handleDeleteTask();
        slidePanel.handleAttachment();
      }
    }]);
    return AppTaskboard;
  }(_Site3.default);

  var instance = null;

  function getInstance() {
    if (!instance) {
      instance = new AppTaskboard();
    }

    return instance;
  }

  function run() {
    var app = getInstance();
    app.run();
  }

  exports.AppTaskboard = AppTaskboard;
  exports.run = run;
  exports.getInstance = getInstance;
  exports.default = AppTaskboard;
});
</script>

<script type="text/javascript">
	(function(global, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.jQuery);
    global.jquerySlidePanelEs = mod.exports;
  }
})(this, function(_jquery) {
  'use strict';

  var _jquery2 = _interopRequireDefault(_jquery);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule
      ? obj
      : {
          default: obj
        };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var _createClass = (function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function(Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  var info = {
    version: '0.3.5'
  };

  function convertMatrixToArray(value) {
    if (value && value.substr(0, 6) === 'matrix') {
      return value
        .replace(/^.*\((.*)\)$/g, '$1')
        .replace(/px/g, '')
        .split(/, +/);
    }
    return false;
  }

  function getHashCode(object) {
    /* eslint no-bitwise: "off" */
    if (typeof object !== 'string') {
      object = JSON.stringify(object);
    }

    var chr = void 0,
      hash = 0,
      i = void 0,
      len = void 0;
    if (object.length === 0) {
      return hash;
    }
    for (i = 0, len = object.length; i < len; i++) {
      chr = object.charCodeAt(i);
      hash = (hash << 5) - hash + chr;
      hash |= 0; // Convert to 32bit integer
    }

    return hash;
  }

  function getTime() {
    if (typeof window.performance !== 'undefined' && window.performance.now) {
      return window.performance.now();
    }
    return Date.now();
  }

  function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
  }

  function isPx(n) {
    return typeof n === 'string' && n.indexOf('px') !== -1;
  }

  /* eslint no-unused-vars: "off" */
  var DEFAULTS = {
    skin: null,

    classes: {
      base: 'slidePanel',
      show: 'slidePanel-show',
      loading: 'slidePanel-loading',
      content: 'slidePanel-content',
      dragging: 'slidePanel-dragging',
      willClose: 'slidePanel-will-close'
    },

    closeSelector: null,

    template: function template(options) {
      return (
        '<div class="' +
        options.classes.base +
        ' ' +
        options.classes.base +
        '-' +
        options.direction +
        '"><div class="' +
        options.classes.content +
        '"></div></div>'
      );
    },

    loading: {
      appendTo: 'panel',
      template: function template(options) {
        return '<div class="' + options.classes.loading + '"></div>';
      },
      showCallback: function showCallback(options) {
        this.$el.addClass(options.classes.loading + '-show');
      },
      hideCallback: function hideCallback(options) {
        this.$el.removeClass(options.classes.loading + '-show');
      }
    },

    contentFilter: function contentFilter(content, object) {
      return content;
    },

    useCssTransforms3d: true,
    useCssTransforms: true,
    useCssTransitions: true,

    dragTolerance: 150,

    mouseDragHandler: null,
    mouseDrag: true,
    touchDrag: true,
    pointerDrag: true,

    direction: 'right', // top, bottom, left, right
    duration: '500',
    easing: 'ease', // linear, ease-in, ease-out, ease-in-out

    // callbacks
    beforeLoad: $.noop, // Before loading
    afterLoad: $.noop, // After loading
    beforeShow: $.noop, // Before opening
    afterShow: $.noop, // After opening
    onChange: $.noop, // On changing
    beforeHide: $.noop, // Before closing
    afterHide: $.noop, // After closing
    beforeDrag: $.noop, // Before drag
    afterDrag: $.noop // After drag
  };

  var Instance = (function() {
    function Instance(object) {
      _classCallCheck(this, Instance);

      for (
        var _len = arguments.length,
          args = Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        args[_key - 1] = arguments[_key];
      }

      this.initialize.apply(this, [object].concat(args));
    }

    _createClass(Instance, [
      {
        key: 'initialize',
        value: function initialize(object) {
          var options =
            (arguments.length <= 1 ? undefined : arguments[1]) || {};

          if (typeof object === 'string') {
            object = {
              url: object
            };
          } else if (object && object.nodeType === 1) {
            var $element = (0, _jquery2.default)(object);

            object = {
              url: $element.attr('href'),
              settings: $element.data('settings') || {},
              options: $element.data() || {}
            };
          }

          if (object && object.options) {
            object.options = _jquery2.default.extend(
              true,
              options,
              object.options
            );
          } else {
            object.options = options;
          }

          object.options = _jquery2.default.extend(
            true,
            {},
            DEFAULTS,
            object.options
          );

          _jquery2.default.extend(this, object);

          return this;
        }
      }
    ]);

    return Instance;
  })();

  /**
   * Css features detect
   **/
  var Support = {};

  (function(support) {
    /**
     * Borrowed from Owl carousel
     **/
    'use strict';

    var events = {
        transition: {
          end: {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd',
            transition: 'transitionend'
          }
        },
        animation: {
          end: {
            WebkitAnimation: 'webkitAnimationEnd',
            MozAnimation: 'animationend',
            OAnimation: 'oAnimationEnd',
            animation: 'animationend'
          }
        }
      },
      prefixes = ['webkit', 'Moz', 'O', 'ms'],
      style = (0, _jquery2.default)('<support>').get(0).style,
      tests = {
        csstransforms: function csstransforms() {
          return Boolean(test('transform'));
        },
        csstransforms3d: function csstransforms3d() {
          return Boolean(test('perspective'));
        },
        csstransitions: function csstransitions() {
          return Boolean(test('transition'));
        },
        cssanimations: function cssanimations() {
          return Boolean(test('animation'));
        }
      };

    var test = function test(property, prefixed) {
      var result = false,
        upper = property.charAt(0).toUpperCase() + property.slice(1);

      if (style[property] !== undefined) {
        result = property;
      }
      if (!result) {
        _jquery2.default.each(prefixes, function(i, prefix) {
          if (style[prefix + upper] !== undefined) {
            result = '-' + prefix.toLowerCase() + '-' + upper;
            return false;
          }
          return true;
        });
      }

      if (prefixed) {
        return result;
      }
      if (result) {
        return true;
      }
      return false;
    };

    var prefixed = function prefixed(property) {
      return test(property, true);
    };

    if (tests.csstransitions()) {
      /*eslint no-new-wrappers: "off"*/
      support.transition = new String(prefixed('transition'));
      support.transition.end = events.transition.end[support.transition];
    }

    if (tests.cssanimations()) {
      /*eslint no-new-wrappers: "off"*/
      support.animation = new String(prefixed('animation'));
      support.animation.end = events.animation.end[support.animation];
    }

    if (tests.csstransforms()) {
      /*eslint no-new-wrappers: "off"*/
      support.transform = new String(prefixed('transform'));
      support.transform3d = tests.csstransforms3d();
    }

    if (
      'ontouchstart' in window ||
      (window.DocumentTouch && document instanceof window.DocumentTouch)
    ) {
      support.touch = true;
    } else {
      support.touch = false;
    }

    if (window.PointerEvent || window.MSPointerEvent) {
      support.pointer = true;
    } else {
      support.pointer = false;
    }

    support.prefixPointerEvent = function(pointerEvent) {
      return window.MSPointerEvent
        ? 'MSPointer' +
          pointerEvent.charAt(9).toUpperCase() +
          pointerEvent.substr(10)
        : pointerEvent;
    };
  })(Support);

  function easingBezier(mX1, mY1, mX2, mY2) {
    'use strict';

    function a(aA1, aA2) {
      return 1.0 - 3.0 * aA2 + 3.0 * aA1;
    }

    function b(aA1, aA2) {
      return 3.0 * aA2 - 6.0 * aA1;
    }

    function c(aA1) {
      return 3.0 * aA1;
    }

    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    function calcBezier(aT, aA1, aA2) {
      return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;
    }

    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
    function getSlope(aT, aA1, aA2) {
      return 3.0 * a(aA1, aA2) * aT * aT + 2.0 * b(aA1, aA2) * aT + c(aA1);
    }

    function getTForX(aX) {
      // Newton raphson iteration
      var aGuessT = aX;
      for (var i = 0; i < 4; ++i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);
        if (currentSlope === 0.0) {
          return aGuessT;
        }
        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }
      return aGuessT;
    }

    if (mX1 === mY1 && mX2 === mY2) {
      return {
        css: 'linear',
        fn: function fn(aX) {
          return aX;
        }
      };
    }
    return {
      css: 'cubic-bezier(' + mX1 + ',' + mY1 + ',' + mX2 + ',' + mY2 + ')',
      fn: function fn(aX) {
        return calcBezier(getTForX(aX), mY1, mY2);
      }
    };
  }

  var Easings = {
    ease: easingBezier(0.25, 0.1, 0.25, 1.0),
    linear: easingBezier(0.0, 0.0, 1.0, 1.0),
    'ease-in': easingBezier(0.42, 0.0, 1.0, 1.0),
    'ease-out': easingBezier(0.0, 0.0, 0.58, 1.0),
    'ease-in-out': easingBezier(0.42, 0.0, 0.58, 1.0)
  };

  var Animate = {
    prepareTransition: function prepareTransition(
      $el,
      property,
      duration,
      easing,
      delay
    ) {
      var temp = [];
      if (property) {
        temp.push(property);
      }
      if (duration) {
        if (_jquery2.default.isNumeric(duration)) {
          duration = duration + 'ms';
        }
        temp.push(duration);
      }
      if (easing) {
        temp.push(easing);
      } else {
        temp.push(this.easing.css);
      }
      if (delay) {
        temp.push(delay);
      }
      $el.css(Support.transition, temp.join(' '));
    },
    do: function _do(view, value, callback) {
      SlidePanel.enter('animating');

      var duration = view.options.duration,
        easing = view.options.easing || 'ease';

      var that = this;
      var style = view.makePositionStyle(value);
      var property = null;

      for (property in style) {
        if ({}.hasOwnProperty.call(style, property)) {
          break;
        }
      }

      if (view.options.useCssTransitions && Support.transition) {
        setTimeout(function() {
          that.prepareTransition(view.$panel, property, duration, easing);
        }, 20);

        view.$panel.one(Support.transition.end, function() {
          if (_jquery2.default.isFunction(callback)) {
            callback();
          }

          view.$panel.css(Support.transition, '');

          SlidePanel.leave('animating');
        });
        setTimeout(function() {
          view.setPosition(value);
        }, 20);
      } else {
        var startTime = getTime();
        var start = view.getPosition();
        var end = value;

        var run = function run(time) {
          var percent = (time - startTime) / view.options.duration;

          if (percent > 1) {
            percent = 1;
          }

          percent = Easings[easing].fn(percent);

          var current = parseFloat(start + percent * (end - start), 10);

          view.setPosition(current);

          if (percent === 1) {
            window.cancelAnimationFrame(that._frameId);
            that._frameId = null;

            if (_jquery2.default.isFunction(callback)) {
              callback();
            }

            SlidePanel.leave('animating');
          } else {
            that._frameId = window.requestAnimationFrame(run);
          }
        };

        that._frameId = window.requestAnimationFrame(run);
      }
    }
  };

  var Loading = (function() {
    function Loading(view) {
      _classCallCheck(this, Loading);

      this.initialize(view);
    }

    _createClass(Loading, [
      {
        key: 'initialize',
        value: function initialize(view) {
          this._view = view;
          this.build();
        }
      },
      {
        key: 'build',
        value: function build() {
          if (this._builded) {
            return;
          }

          var options = this._view.options;
          var html = options.loading.template.call(this, options);
          this.$el = (0, _jquery2.default)(html);

          switch (options.loading.appendTo) {
            case 'panel':
              this.$el.appendTo(this._view.$panel);
              break;
            case 'body':
              this.$el.appendTo('body');
              break;
            default:
              this.$el.appendTo(options.loading.appendTo);
          }

          this._builded = true;
        }
      },
      {
        key: 'show',
        value: function show(callback) {
          this.build();
          var options = this._view.options;
          options.loading.showCallback.call(this, options);

          if (_jquery2.default.isFunction(callback)) {
            callback.call(this);
          }
        }
      },
      {
        key: 'hide',
        value: function hide(callback) {
          var options = this._view.options;
          options.loading.hideCallback.call(this, options);

          if (_jquery2.default.isFunction(callback)) {
            callback.call(this);
          }
        }
      }
    ]);

    return Loading;
  })();

  var Drag = (function() {
    function Drag() {
      _classCallCheck(this, Drag);

      this.initialize.apply(this, arguments);
    }

    _createClass(Drag, [
      {
        key: 'initialize',
        value: function initialize(view) {
          this._view = view;
          this.options = view.options;
          this._drag = {
            time: null,
            pointer: null
          };

          this.bindEvents();
        }
      },
      {
        key: 'bindEvents',
        value: function bindEvents() {
          var $panel = this._view.$panel,
            options = this.options;

          if (options.mouseDrag) {
            $panel.on(
              SlidePanel.eventName('mousedown'),
              _jquery2.default.proxy(this.onDragStart, this)
            );
            $panel.on(SlidePanel.eventName('dragstart selectstart'), function(
              event
            ) {
              /* eslint consistent-return: "off" */
              if (options.mouseDragHandler) {
                if (
                  !(0, _jquery2.default)(event.target).is(
                    options.mouseDragHandler
                  ) &&
                  !(
                    (0, _jquery2.default)(event.target).parents(
                      options.mouseDragHandler
                    ).length > 0
                  )
                ) {
                  return;
                }
              }
              return false;
            });
          }

          if (options.touchDrag && Support.touch) {
            $panel.on(
              SlidePanel.eventName('touchstart'),
              _jquery2.default.proxy(this.onDragStart, this)
            );
            $panel.on(
              SlidePanel.eventName('touchcancel'),
              _jquery2.default.proxy(this.onDragEnd, this)
            );
          }

          if (options.pointerDrag && Support.pointer) {
            $panel.on(
              SlidePanel.eventName(Support.prefixPointerEvent('pointerdown')),
              _jquery2.default.proxy(this.onDragStart, this)
            );
            $panel.on(
              SlidePanel.eventName(Support.prefixPointerEvent('pointercancel')),
              _jquery2.default.proxy(this.onDragEnd, this)
            );
          }
        }
      },
      {
        key: 'onDragStart',
        value: function onDragStart(event) {
          var that = this;

          if (event.which === 3) {
            return;
          }

          var options = this.options;

          this._view.$panel.addClass(this.options.classes.dragging);

          this._position = this._view.getPosition(true);

          this._drag.time = new Date().getTime();
          this._drag.pointer = this.pointer(event);

          var callback = function callback() {
            SlidePanel.enter('dragging');
            SlidePanel.trigger(that._view, 'beforeDrag');
          };

          if (options.mouseDrag) {
            if (options.mouseDragHandler) {
              if (
                !(0, _jquery2.default)(event.target).is(
                  options.mouseDragHandler
                ) &&
                !(
                  (0, _jquery2.default)(event.target).parents(
                    options.mouseDragHandler
                  ).length > 0
                )
              ) {
                return;
              }
            }

            (0, _jquery2.default)(document).on(
              SlidePanel.eventName('mouseup'),
              _jquery2.default.proxy(this.onDragEnd, this)
            );

            (0, _jquery2.default)(document).one(
              SlidePanel.eventName('mousemove'),
              _jquery2.default.proxy(function() {
                (0, _jquery2.default)(document).on(
                  SlidePanel.eventName('mousemove'),
                  _jquery2.default.proxy(this.onDragMove, this)
                );

                callback();
              }, this)
            );
          }

          if (options.touchDrag && Support.touch) {
            (0, _jquery2.default)(document).on(
              SlidePanel.eventName('touchend'),
              _jquery2.default.proxy(this.onDragEnd, this)
            );

            (0, _jquery2.default)(document).one(
              SlidePanel.eventName('touchmove'),
              _jquery2.default.proxy(function() {
                (0, _jquery2.default)(document).on(
                  SlidePanel.eventName('touchmove'),
                  _jquery2.default.proxy(this.onDragMove, this)
                );

                callback();
              }, this)
            );
          }

          if (options.pointerDrag && Support.pointer) {
            (0, _jquery2.default)(document).on(
              SlidePanel.eventName(Support.prefixPointerEvent('pointerup')),
              _jquery2.default.proxy(this.onDragEnd, this)
            );

            (0, _jquery2.default)(document).one(
              SlidePanel.eventName(Support.prefixPointerEvent('pointermove')),
              _jquery2.default.proxy(function() {
                (0, _jquery2.default)(document).on(
                  SlidePanel.eventName(
                    Support.prefixPointerEvent('pointermove')
                  ),
                  _jquery2.default.proxy(this.onDragMove, this)
                );

                callback();
              }, this)
            );
          }

          (0, _jquery2.default)(document).on(
            SlidePanel.eventName('blur'),
            _jquery2.default.proxy(this.onDragEnd, this)
          );

          event.preventDefault();
        }
      },
      {
        key: 'onDragMove',
        value: function onDragMove(event) {
          var distance = this.distance(this._drag.pointer, this.pointer(event));

          if (!SlidePanel.is('dragging')) {
            return;
          }

          if (Math.abs(distance) > this.options.dragTolerance) {
            if (this._willClose !== true) {
              this._willClose = true;
              this._view.$panel.addClass(this.options.classes.willClose);
            }
          } else if (this._willClose !== false) {
            this._willClose = false;
            this._view.$panel.removeClass(this.options.classes.willClose);
          }

          if (!SlidePanel.is('dragging')) {
            return;
          }

          event.preventDefault();
          this.move(distance);
        }
      },
      {
        key: 'onDragEnd',
        value: function onDragEnd(event) {
          var distance = this.distance(this._drag.pointer, this.pointer(event));

          (0, _jquery2.default)(document).off(
            SlidePanel.eventName(
              'mousemove mouseup touchmove touchend pointermove pointerup MSPointerMove MSPointerUp blur'
            )
          );

          this._view.$panel.removeClass(this.options.classes.dragging);

          if (this._willClose === true) {
            this._willClose = false;
            this._view.$panel.removeClass(this.options.classes.willClose);
          }

          if (!SlidePanel.is('dragging')) {
            return;
          }

          SlidePanel.leave('dragging');

          SlidePanel.trigger(this._view, 'afterDrag');

          if (Math.abs(distance) < this.options.dragTolerance) {
            this._view.revert();
          } else {
            this._view.hide();
            // SlidePanel.hide();
          }
        }
      },
      {
        key: 'pointer',
        value: function pointer(event) {
          var result = {
            x: null,
            y: null
          };

          event = event.originalEvent || event || window.event;

          event =
            event.touches && event.touches.length
              ? event.touches[0]
              : event.changedTouches && event.changedTouches.length
                ? event.changedTouches[0]
                : event;

          if (event.pageX) {
            result.x = event.pageX;
            result.y = event.pageY;
          } else {
            result.x = event.clientX;
            result.y = event.clientY;
          }

          return result;
        }
      },
      {
        key: 'distance',
        value: function distance(first, second) {
          var d = this.options.direction;
          if (d === 'left' || d === 'right') {
            return second.x - first.x;
          }
          return second.y - first.y;
        }
      },
      {
        key: 'move',
        value: function move(value) {
          var position = this._position + value;

          if (
            this.options.direction === 'right' ||
            this.options.direction === 'bottom'
          ) {
            if (position < 0) {
              return;
            }
          } else if (position > 0) {
            return;
          }

          if (
            !this.options.useCssTransforms &&
            !this.options.useCssTransforms3d
          ) {
            if (
              this.options.direction === 'right' ||
              this.options.direction === 'bottom'
            ) {
              position = -position;
            }
          }

          this._view.setPosition(position + 'px');
        }
      }
    ]);

    return Drag;
  })();

  var View = (function() {
    function View(options) {
      _classCallCheck(this, View);

      this.initialize(options);
    }

    _createClass(View, [
      {
        key: 'initialize',
        value: function initialize(options) {
          this.options = options;
          this._instance = null;
          this._showed = false;
          this._isLoading = false;

          this.build();
        }
      },
      {
        key: 'setLength',
        value: function setLength() {
          switch (this.options.direction) {
            case 'top':
            case 'bottom':
              this._length = this.$panel.outerHeight();
              break;
            case 'left':
            case 'right':
              this._length = this.$panel.outerWidth();
              break;
            // no default
          }
        }
      },
      {
        key: 'build',
        value: function build() {
          if (this._builded) {
            return;
          }

          var options = this.options;

          var html = options.template.call(this, options);
          var that = this;

          this.$panel = (0, _jquery2.default)(html).appendTo('body');
          if (options.skin) {
            this.$panel.addClass(options.skin);
          }
          this.$content = this.$panel.find('.' + this.options.classes.content);

          if (options.closeSelector) {
            this.$panel.on(
              'click touchstart',
              options.closeSelector,
              function() {
                that.hide();
                return false;
              }
            );
          }
          this.loading = new Loading(this);

          this.setLength();
          this.setPosition(this.getHidePosition());

          if (options.mouseDrag || options.touchDrag || options.pointerDrag) {
            this.drag = new Drag(this);
          }

          this._builded = true;
        }
      },
      {
        key: 'getHidePosition',
        value: function getHidePosition() {
          /* eslint consistent-return: "off" */
          var options = this.options;

          if (options.useCssTransforms || options.useCssTransforms3d) {
            switch (options.direction) {
              case 'top':
              case 'left':
                return '-100';
              case 'bottom':
              case 'right':
                return '100';
              // no default
            }
          }
          switch (options.direction) {
            case 'top':
            case 'bottom':
              return parseFloat(
                -(this._length / (0, _jquery2.default)(window).height()) * 100,
                10
              );
            case 'left':
            case 'right':
              return parseFloat(
                -(this._length / (0, _jquery2.default)(window).width()) * 100,
                10
              );
            // no default
          }
        }
      },
      {
        key: 'empty',
        value: function empty() {
          this._instance = null;
          this.$content.empty();
        }
      },
      {
        key: 'load',
        value: function load(object) {
          var that = this;
          var options = object.options;

          SlidePanel.trigger(this, 'beforeLoad', object);
          this.empty();

          function setContent(content) {
            content = options.contentFilter.call(this, content, object);
            that.$content.html(content);
            that.hideLoading();

            that._instance = object;

            SlidePanel.trigger(that, 'afterLoad', object);
          }

          if (object.content) {
            setContent(object.content);
          } else if (object.url) {
            this.showLoading();

            _jquery2.default
              .ajax(object.url, object.settings || {})
              .done(function(data) {
                setContent(data);
              });
          } else {
            setContent('');
          }
        }
      },
      {
        key: 'showLoading',
        value: function showLoading() {
          var that = this;
          this.loading.show(function() {
            that._isLoading = true;
          });
        }
      },
      {
        key: 'hideLoading',
        value: function hideLoading() {
          var that = this;
          this.loading.hide(function() {
            that._isLoading = false;
          });
        }
      },
      {
        key: 'show',
        value: function show(callback) {
          this.build();

          SlidePanel.enter('show');
          SlidePanel.trigger(this, 'beforeShow');

          (0, _jquery2.default)('html').addClass(
            this.options.classes.base + '-html'
          );
          this.$panel.addClass(this.options.classes.show);

          var that = this;
          Animate.do(this, 0, function() {
            that._showed = true;
            SlidePanel.trigger(that, 'afterShow');

            if (_jquery2.default.isFunction(callback)) {
              callback.call(that);
            }
          });
        }
      },
      {
        key: 'change',
        value: function change(object) {
          SlidePanel.trigger(this, 'beforeShow');

          SlidePanel.trigger(this, 'onChange', object, this._instance);

          this.load(object);

          SlidePanel.trigger(this, 'afterShow');
        }
      },
      {
        key: 'revert',
        value: function revert(callback) {
          var that = this;
          Animate.do(this, 0, function() {
            if (_jquery2.default.isFunction(callback)) {
              callback.call(that);
            }
          });
        }
      },
      {
        key: 'hide',
        value: function hide(callback) {
          SlidePanel.leave('show');
          SlidePanel.trigger(this, 'beforeHide');

          var that = this;

          Animate.do(this, this.getHidePosition(), function() {
            that.$panel.removeClass(that.options.classes.show);
            that._showed = false;
            that._instance = null;

            if (SlidePanel._current === that) {
              SlidePanel._current = null;
            }

            if (!SlidePanel.is('show')) {
              (0, _jquery2.default)('html').removeClass(
                that.options.classes.base + '-html'
              );
            }

            if (_jquery2.default.isFunction(callback)) {
              callback.call(that);
            }

            SlidePanel.trigger(that, 'afterHide');
          });
        }
      },
      {
        key: 'makePositionStyle',
        value: function makePositionStyle(value) {
          var property = void 0,
            x = '0',
            y = '0';

          if (!isPercentage(value) && !isPx(value)) {
            value = value + '%';
          }

          if (this.options.useCssTransforms && Support.transform) {
            if (
              this.options.direction === 'left' ||
              this.options.direction === 'right'
            ) {
              x = value;
            } else {
              y = value;
            }

            property = Support.transform.toString();

            if (this.options.useCssTransforms3d && Support.transform3d) {
              value = 'translate3d(' + x + ',' + y + ',0)';
            } else {
              value = 'translate(' + x + ',' + y + ')';
            }
          } else {
            property = this.options.direction;
          }
          var temp = {};
          temp[property] = value;
          return temp;
        }
      },
      {
        key: 'getPosition',
        value: function getPosition(px) {
          var value = void 0;

          if (this.options.useCssTransforms && Support.transform) {
            value = convertMatrixToArray(this.$panel.css(Support.transform));
            if (!value) {
              return 0;
            }

            if (
              this.options.direction === 'left' ||
              this.options.direction === 'right'
            ) {
              value = value[12] || value[4];
            } else {
              value = value[13] || value[5];
            }
          } else {
            value = this.$panel.css(this.options.direction);

            value = parseFloat(value.replace('px', ''));
          }

          if (px !== true) {
            value = value / this._length * 100;
          }

          return parseFloat(value, 10);
        }
      },
      {
        key: 'setPosition',
        value: function setPosition(value) {
          var style = this.makePositionStyle(value);
          this.$panel.css(style);
        }
      }
    ]);

    return View;
  })();

  var SlidePanel = {
    // Current state information.
    _states: {},
    _views: {},
    _current: null,

    is: function is(state) {
      return this._states[state] && this._states[state] > 0;
    },
    enter: function enter(state) {
      if (this._states[state] === undefined) {
        this._states[state] = 0;
      }

      this._states[state]++;
    },
    leave: function leave(state) {
      this._states[state]--;
    },
    trigger: function trigger(view, event) {
      for (
        var _len2 = arguments.length,
          args = Array(_len2 > 2 ? _len2 - 2 : 0),
          _key2 = 2;
        _key2 < _len2;
        _key2++
      ) {
        args[_key2 - 2] = arguments[_key2];
      }

      var data = [view].concat(args);

      // event
      (0, _jquery2.default)(document).trigger('slidePanel::' + event, data);
      if (_jquery2.default.isFunction(view.options[event])) {
        view.options[event].apply(view, args);
      }
    },
    eventName: function eventName(events) {
      if (typeof events !== 'string' || events === '') {
        return '.slidepanel';
      }
      events = events.split(' ');

      var length = events.length;
      for (var i = 0; i < length; i++) {
        events[i] = events[i] + '.slidepanel';
      }
      return events.join(' ');
    },
    show: function show(object, options) {
      var _this = this;

      if (!(object instanceof Instance)) {
        switch (arguments.length) {
          case 0:
            object = new Instance();
            break;
          case 1:
            object = new Instance(object);
            break;
          case 2:
            object = new Instance(object, options);
            break;
          // no default
        }
      }

      var view = this.getView(object.options);

      var callback = function callback() {
        view.show();
        view.load(object);
        _this._current = view;
      };
      if (this._current !== null) {
        if (view === this._current) {
          this._current.change(object);
        } else {
          this._current.hide(callback);
        }
      } else {
        callback();
      }
    },
    getView: function getView(options) {
      var code = getHashCode(options);

      if (this._views.hasOwnProperty(code)) {
        return this._views[code];
      }

      return (this._views[code] = new View(options));
    },
    hide: function hide(object) {
      if (
        typeof object !== 'undefined' &&
        typeof object.options !== 'undefined'
      ) {
        var view = this.getView(object.options);
        view.hide();
      } else if (this._current !== null) {
        this._current.hide();
      }
    }
  };

  var api = {
    is: function is(state) {
      return SlidePanel.is(state);
    },
    show: function show(object, options) {
      SlidePanel.show(object, options);
      return this;
    },
    hide: function hide() {
      for (
        var _len3 = arguments.length, args = Array(_len3), _key3 = 0;
        _key3 < _len3;
        _key3++
      ) {
        args[_key3] = arguments[_key3];
      }

      SlidePanel.hide(args);
      return this;
    }
  };

  if (!Date.now) {
    Date.now = function() {
      return new Date().getTime();
    };
  }

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame =
      window[vp + 'CancelAnimationFrame'] ||
      window[vp + 'CancelRequestAnimationFrame'];
  }

  if (
    /iP(ad|hone|od).*OS (6|7|8)/.test(window.navigator.userAgent) ||
    !window.requestAnimationFrame ||
    !window.cancelAnimationFrame
  ) {
    var lastTime = 0;
    window.requestAnimationFrame = function(callback) {
      var now = getTime();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function() {
        callback((lastTime = nextTime));
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }

  var OtherSlidePanel = _jquery2.default.fn.slidePanel;

  var jQuerySlidePanel = function jQuerySlidePanel(options) {
    for (
      var _len4 = arguments.length,
        args = Array(_len4 > 1 ? _len4 - 1 : 0),
        _key4 = 1;
      _key4 < _len4;
      _key4++
    ) {
      args[_key4 - 1] = arguments[_key4];
    }

    var method = options;

    if (typeof options === 'string') {
      return this.each(function() {
        var instance = _jquery2.default.data(this, 'slidePanel');

        if (!(instance instanceof Instance)) {
          instance = new Instance(this, args);
          _jquery2.default.data(this, 'slidePanel', instance);
        }

        switch (method) {
          case 'hide':
            SlidePanel.hide(instance);
            break;
          case 'show':
            SlidePanel.show(instance);
            break;
          // no default
        }
      });
    }
    return this.each(function() {
      if (!_jquery2.default.data(this, 'slidePanel')) {
        _jquery2.default.data(this, 'slidePanel', new Instance(this, options));

        (0, _jquery2.default)(this).on('click', function(e) {
          var instance = _jquery2.default.data(this, 'slidePanel');
          SlidePanel.show(instance);

          e.preventDefault();
          e.stopPropagation();
        });
      }
    });
  };

  _jquery2.default.fn.slidePanel = jQuerySlidePanel;

  _jquery2.default.slidePanel = function() {
    SlidePanel.show.apply(SlidePanel, arguments);
  };

  _jquery2.default.extend(
    _jquery2.default.slidePanel,
    {
      setDefaults: function setDefaults(options) {
        _jquery2.default.extend(
          true,
          DEFAULTS,
          _jquery2.default.isPlainObject(options) && options
        );
      },
      noConflict: function noConflict() {
        _jquery2.default.fn.slidePanel = OtherSlidePanel;
        return jQuerySlidePanel;
      }
    },
    info,
    api
  );
});
</script>












